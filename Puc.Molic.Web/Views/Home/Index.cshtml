@using Puc.Molic.Model
@model FlowModel


<style type="text/css">
@@import url("https://fonts.googleapis.com/css?family=Mukta:300,400,700");
.circle {
    border-radius: 50%;
    width: 50px;
    height: 50px;
    background: black;
    margin-top:4px;	
}

.square {
    width: 50px;
    height: 50px;
    background: black;
	margin-top:4px;	
}

.tooltip,
.container__sources:before,
.container__build:before,
.container__deploy:before {
  position: absolute;
  right: 0;
  bottom: 80%;
  color: #fff;
  background: #ffb238;
  font-size: 0.9rem;
  padding: 0.25rem 0.75rem;
  border-radius: 22.5px;
}
.card,
.container__sources .div_object,
.container__build .div_object {
  background: #fff;
  padding: 1px;
  border-radius: 4px;
  box-shadow: 0 2px 10px #e6e6e6;

  border-radius: 20px;
  border: 2px solid #000;

  width: 200px;
  text-align: center;

}

.container {
  margin: 5vh 2.5vw;
  background: #fff;
  border-radius: 5px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}


#circulo:before {
  content: 'Circulo';
}

#quadrado:before {
  content: 'Quadrado';
}

.container__sources .div_object {
  text-align: left;
  //margin: 0 1rem;
}
.container__build {
  padding: 10vh 10vw;
  border-radius: 8px;
  background: #f9f9f9;
  position: relative;
}
.container__build:before {
  content: 'build';
}
.container__build .div_object {
  margin: 2rem 0;
}
.container__deploy {
  background: #f9f9f9;

  border-radius: 5px;
  position: relative;
}
.container__deploy:before {
  content: 'Id: 2';
}

@@media (max-width: 700px) {
  .container__sources {
    flex-direction: column;
  }
  .container__sources .div_object {
    margin: 1rem 0;
  }
}
@@-moz-keyframes animateline {
  from {
    stroke-dashoffset: 0;
  }
  to {
    stroke-dashoffset: -5rem;
  }
}
@@-webkit-keyframes animateline {
  from {
    stroke-dashoffset: 0;
  }
  to {
    stroke-dashoffset: -5rem;
  }
}
@@-o-keyframes animateline {
  from {
    stroke-dashoffset: 0;
  }
  to {
    stroke-dashoffset: -5rem;
  }
}
@@keyframes animateline {
  from {
    stroke-dashoffset: 0;
  }
  to {
    stroke-dashoffset: -5rem;
  }
}

i.arrow-down{
  color: #000;
  width:  0.2em;
  height:  6em;
  display:  inline-block;
  position:  relative;
  
/*background: repeating-linear-gradient(
  0deg,
  #000,
  #000 10px,
  #FFF 10px,
  #FFF 20px
);*/
background: #000;
  
  vertical-align: top;
} 
i.arrow-down:after{
  border-right:  0.3em solid transparent;
  border-left:  0.3em solid transparent;
  border-top:  0.7em solid currentColor;
  position:  absolute;
  content:  "";
  bottom:  -0.2em;
  left:  -0.19em;
}


i.arrow-down-dashed{
  color: #000;
  width:  0.2em;
  height:  6em;
  display:  inline-block;
  position:  relative;
  
 background: repeating-linear-gradient(
  0deg,
  #000,
  #000 10px,
  #FFF 10px,
  #FFF 20px
 );
  
  vertical-align: top;
} 
i.arrow-down-dashed:after{
  border-right:  0.3em solid transparent;
  border-left:  0.3em solid transparent;
  border-top:  0.7em solid currentColor;
  position:  absolute;
  content:  "";
  bottom:  -0.2em;
  left:  -0.19em;
}

.topicChange {

  !importantackground: #CFCFCF;

}














.container__sources {
  display: flex;
  border-radius: 8px;

  background: #FFF;
  position: relative;
  margin-top:4px;
}





.mainbody,
.header,

.mainbody {
    margin-top: 0;
    max-height: 388px;
    overflow: auto;
    padding:4px;
}
.header {
	
  text-align: center;
  margin-top:5px;

    border-bottom: 1px solid #000;
    min-height: 30px;
}



</style>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet" />


<form method="post" action="/Home/Index">
    <div class="form-group">
        <label for="exampleInputEmail1">Elemento inicial</label>
        <select name="ElementoInicial" class="form-select" aria-label="Default select example">
            <option selected>Open this select menu</option>
            @foreach (Node node in Model.Diagram.Nodes)
            {
                <option value="@node.Id">@string.Format("{0} - {1} - {2} - {3}", node.Id, node.Type, node.Topic, node.Comment)</option>
            }

        </select>

    </div>
    <div class="form-group">
        <label for="exampleInputPassword1">Elemento Final</label>
        <select name="ElementoFinal" class="form-select" aria-label="Default select example">
            <option selected>Open this select menu</option>
            @foreach (Node node in Model.Diagram.Nodes)
            {
                <option value="@node.Id">@string.Format("{0} - {1} - {2} - {3}", node.Id, node.Type, node.Topic, node.Comment)</option>
            }
        </select>

    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Obter caminhos</button>
    </div>


</form>

<br />



<div class="form-group subdiagram">
    <center>


        <div>
            <div class='row'>
                <div class='col-md-12' style='margin-top: 50px;'>
                    <ul class='nav nav-pills'>
                        @{
                            string active = "active";
                        }
                        @foreach (Diagram subDiagram in Model.DiagramPaths)
                        {
                            <li class='@active'><a data-toggle='tab' href='#caminho_@subDiagram.Id'>@string.Format("Caminho #{0} ({1})", subDiagram.Id, subDiagram.Name)</a></li>
                            active = string.Empty;
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="tab-content">

            @{
                active = "active";
            }
            @foreach (Diagram subDiagram in Model.DiagramPaths)
            {
                
                Node previousNode = null;

                <div id='caminho_@subDiagram.Id' class='tab-pane fade in @active'>
                    <div class='row'>
                        <center>
                            <section class="container">
                            @{
                                active = string.Empty;
                                foreach (Node node in subDiagram.Nodes)
                                {

                                    <style type="text/css">
                                    #node_@node.Id:before {
                                        content: '@node.Id';
                                    }
                                        #edge_@node.Id:before {
                                        content: '@node.Id';
                                    }
                                    </style>


                                    if (previousNode != null)
                                    {

                                        Edge edge = subDiagram.Edges.Where(x => x.SourceId == previousNode.Id && x.TargetId == node.Id).FirstOrDefault();

                                        switch (edge.Type)
                                        {
                                            case Consts.ElementType.BreakdownRecovery:
                                                <i class='arrow-down-dashed'> <br>&nbsp;&nbsp;@edge.Id</i>
                                                break;
                                            case Consts.ElementType.TurnGiving:
                                                <i class="arrow-down"> <br>&nbsp;&nbsp;@edge.Id</i>
                                                break;
                                        }
                                    }
                                    previousNode = node;

                                    switch (node.Type)
                                    {
                                        case Consts.ElementType.Opening:
                                            <div class="container__sources div_object" id="node_@node.Id">
                                                <div class="circle"></div>
                                            </div>
                                            break;
                                        case Consts.ElementType.SystemProcess:                               
                                        	<div class="container__sources div_object" id="node_@node.Id">
                                                <div class="square"></div>
	                                        </div>
                                            break;
                                        case Consts.ElementType.Scene:
                                            <div class="container__sources div_object" id="node_@node.Id">
		                                        <div class="sources div_object">
			                                        <div class="header">@node.Topic</div>
			                                        <div class="mainbody">
				                                        <p>@node.Comment</p>
			                                        </div>
		                                        </div>
	                                        </div>
                                            break;
                                        case Consts.ElementType.TopicChange:
                                            <div class="container__sources div_object" id="node_@node.Id">
                                                <div class="sources div_object" style="background-color:#ccc">
                                                    <div class="mainbody">
                                                        <p>@node.Comment</p>
                                                    </div>
                                                </div>
                                            </div>
                                            break;
                                    }
                                }
                            }
                            </section>
                        </center>
                    </div>
                </div>
            }



        </div>

    </center>


</div>
